{"remainingRequest":"K:\\VUE\\xz_admin_v2\\node_modules\\thread-loader\\dist\\cjs.js!K:\\VUE\\xz_admin_v2\\node_modules\\babel-loader\\lib\\index.js!K:\\VUE\\xz_admin_v2\\src\\plugin.js","dependencies":[{"path":"K:\\VUE\\xz_admin_v2\\src\\plugin.js","mtime":1557641064201},{"path":"K:\\VUE\\xz_admin_v2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531859503174},{"path":"K:\\VUE\\xz_admin_v2\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1531859515376},{"path":"K:\\VUE\\xz_admin_v2\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport GlobalComponent from '@/vueExtend/index'; //定义全局公共方法\n\nimport CommonFun from './common/CommonFun'; //引用文件\n\nconsole.log('plugin.js');\nvar MyPlugin = {};\n\nMyPlugin.install = function (Vue, options) {\n  //可以在控制台使用Vue变量,测试代码之类的,比如注册 一个全局组件 anchored-heading ,然后其他组件 模板中有                 <component :level=\"singleSelected*1\" :is=\"component1\">标题</component>\n  //修改 这个组件的component1=\"anchored-heading\" 就能改变页面的内容\n  window.Vue = Vue;\n  Vue.prototype.$message2 = GlobalComponent.Message2.install;\n  Vue.prototype.$message1 = GlobalComponent.Message1.install;\n  Vue.prototype.CommonFun = CommonFun; //挂载到Vue实例上面\n  //全局混入\n\n  Vue.mixin({\n    created: function created() {\n      //每个vue实例对象 都赋给 window下的全局变量,可以测试用;\n      //如果每个组件的name都严格按照 src下的 文件目录+文件名来命名,则可把所有vue实例赋给全局变量,每个组件都能方便使用其他vue实例\n      window['___' + this.$options.name] = this;\n    }\n  }); // 注册一个全局自定义指令 `v-focus`\n\n  Vue.directive('focus', {\n    // 当被绑定的元素插入到 DOM 中时……\n    inserted: function inserted(el) {\n      // 聚焦元素\n      el.focus();\n    }\n  }); // 1. 添加全局方法或属性\n\n  Vue.myGlobalMethod = function () {} // 逻辑...\n  // 2. 添加全局资源\n  ;\n\n  Vue.directive('my-directive', {\n    bind: function bind(el, binding, vnode, oldVnode) {// 逻辑...\n    }\n  }); // 3. 注入组件\n\n  Vue.mixin({\n    created: function created() {// 逻辑...\n    }\n  }); // 4. 添加实例方法\n\n  Vue.prototype.$myMethod = function (methodOptions) {// 逻辑...\n  };\n};\n\nexport default MyPlugin;",{"version":3,"sources":["src\\plugin.js"],"names":["GlobalComponent","CommonFun","console","log","MyPlugin","install","Vue","options","window","prototype","$message2","Message2","$message1","Message1","mixin","created","$options","name","directive","inserted","el","focus","myGlobalMethod","bind","binding","vnode","oldVnode","$myMethod","methodOptions"],"mappings":";;;AAAA,OAAOA,eAAP,MAA4B,mBAA5B,C,CACA;;AACA,OAAOC,SAAP,MAAsB,oBAAtB,C,CAA2C;;AAC3CC,QAAQC,GAAR,CAAY,WAAZ;AAEA,IAAMC,WAAS,EAAf;;AACAA,SAASC,OAAT,GAAmB,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AAIvC;AACA;AACAC,SAAOF,GAAP,GAAaA,GAAb;AAIAA,MAAIG,SAAJ,CAAcC,SAAd,GAA0BV,gBAAgBW,QAAhB,CAAyBN,OAAnD;AACAC,MAAIG,SAAJ,CAAcG,SAAd,GAA0BZ,gBAAgBa,QAAhB,CAAyBR,OAAnD;AACAC,MAAIG,SAAJ,CAAcR,SAAd,GAA0BA,SAA1B,CAZuC,CAYH;AAIpC;;AACAK,MAAIQ,KAAJ,CAAU;AACNC,aAAS,mBAAY;AACjB;AACA;AACAP,aAAO,QAAQ,KAAKQ,QAAL,CAAcC,IAA7B,IAAqC,IAArC;AACH;AALK,GAAV,EAjBuC,CA0BvC;;AACAX,MAAIY,SAAJ,CAAc,OAAd,EAAuB;AACnB;AACAC,cAAU,kBAAUC,EAAV,EAAc;AACpB;AACAA,SAAGC,KAAH;AACH;AALkB,GAAvB,EA3BuC,CAmCvC;;AACAf,MAAIgB,cAAJ,GAAqB,YAAY,CAEhC,CAFoB,CACjB;AAGJ;AAJA;;AAKAhB,MAAIY,SAAJ,CAAc,cAAd,EAA8B;AAC1BK,QAD0B,gBACrBH,EADqB,EACjBI,OADiB,EACRC,KADQ,EACDC,QADC,EACS,CAC/B;AACH;AAHyB,GAA9B,EAzCuC,CAgDvC;;AACApB,MAAIQ,KAAJ,CAAU;AACNC,aAAS,mBAAY,CACjB;AACH;AAHK,GAAV,EAjDuC,CAwDvC;;AACAT,MAAIG,SAAJ,CAAckB,SAAd,GAA0B,UAAUC,aAAV,EAAyB,CAC/C;AACH,GAFD;AAGH,CA5DD;;AA6DA,eAAexB,QAAf","sourceRoot":"K:\\VUE\\xz_admin_v2","sourcesContent":["import GlobalComponent from '@/vueExtend/index'\r\n//定义全局公共方法\r\nimport CommonFun from './common/CommonFun' //引用文件\r\nconsole.log('plugin.js');\r\n\r\nconst MyPlugin={};\r\nMyPlugin.install = function (Vue, options) {\r\n\r\n\r\n\r\n    //可以在控制台使用Vue变量,测试代码之类的,比如注册 一个全局组件 anchored-heading ,然后其他组件 模板中有                 <component :level=\"singleSelected*1\" :is=\"component1\">标题</component>\r\n    //修改 这个组件的component1=\"anchored-heading\" 就能改变页面的内容\r\n    window.Vue = Vue;    \r\n\r\n\r\n\r\n    Vue.prototype.$message2 = GlobalComponent.Message2.install;\r\n    Vue.prototype.$message1 = GlobalComponent.Message1.install;\r\n    Vue.prototype.CommonFun = CommonFun //挂载到Vue实例上面\r\n\r\n\r\n\r\n    //全局混入\r\n    Vue.mixin({\r\n        created: function () {\r\n            //每个vue实例对象 都赋给 window下的全局变量,可以测试用;\r\n            //如果每个组件的name都严格按照 src下的 文件目录+文件名来命名,则可把所有vue实例赋给全局变量,每个组件都能方便使用其他vue实例\r\n            window['___' + this.$options.name] = this;\r\n        }\r\n    })\r\n\r\n\r\n    // 注册一个全局自定义指令 `v-focus`\r\n    Vue.directive('focus', {\r\n        // 当被绑定的元素插入到 DOM 中时……\r\n        inserted: function (el) {\r\n            // 聚焦元素\r\n            el.focus()\r\n        }\r\n    })\r\n\r\n    // 1. 添加全局方法或属性\r\n    Vue.myGlobalMethod = function () {\r\n        // 逻辑...\r\n    }\r\n\r\n    // 2. 添加全局资源\r\n    Vue.directive('my-directive', {\r\n        bind(el, binding, vnode, oldVnode) {\r\n            // 逻辑...\r\n        }\r\n\r\n    })\r\n\r\n    // 3. 注入组件\r\n    Vue.mixin({\r\n        created: function () {\r\n            // 逻辑...\r\n        }\r\n\r\n    })\r\n\r\n    // 4. 添加实例方法\r\n    Vue.prototype.$myMethod = function (methodOptions) {\r\n        // 逻辑...\r\n    }\r\n}\r\nexport default MyPlugin"]}]}