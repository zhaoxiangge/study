{"remainingRequest":"K:\\VUE\\vueStudy\\node_modules\\thread-loader\\dist\\cjs.js!K:\\VUE\\vueStudy\\node_modules\\babel-loader\\lib\\index.js!K:\\VUE\\vueStudy\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!K:\\VUE\\vueStudy\\src\\components\\customInput.vue?vue&type=script&lang=js","dependencies":[{"path":"K:\\VUE\\vueStudy\\src\\components\\customInput.vue","mtime":1561991118000},{"path":"K:\\VUE\\vueStudy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531859504000},{"path":"K:\\VUE\\vueStudy\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1531859516000},{"path":"K:\\VUE\\vueStudy\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"K:\\VUE\\vueStudy\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\nvar EventUtil = null;\nvar inputControl = null;\nexport default {\n  name: 'customInput',\n  props: ['value'],\n  data: function data() {\n    return {\n      todos: \"\"\n    };\n  },\n  created: function created() {\n    EventUtil = this.CommonFun.EventUtil;\n    inputControl = this.CommonFun.inputControl;\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    var input = this.$refs.input;\n\n    if (this.$refs.input.getAttribute('data-control') != undefined) {\n      var controlList = this.$refs.input.getAttribute('data-control').split(',');\n      controlList.map(function (item) {\n        return _this[item](_this.$refs.input);\n      });\n    }\n  },\n  methods: {\n    phone: function phone(ele) {\n      //最大长度\n      ele.setAttribute('maxLength', '11'); //只能输入数字\n      // inputControl.onlyNumber(ele);\n    },\n    idCard: function idCard(ele) {\n      //最大长度\n      ele.setAttribute('maxLength', '18'); //只能输入数字\n\n      inputControl.onlyNumber(ele);\n    },\n    magnify: function magnify(ele) {\n      EventUtil.addHandler(ele, 'focus', function (event) {\n        ele.style.transform = \"scale(1.5)\";\n      });\n      EventUtil.addHandler(ele, 'blur', function (event) {\n        ele.style.transform = \"\";\n      });\n    },\n    entertwice: function entertwice(ele) {\n      var that = this;\n      var firstvalue = \"\";\n      var lastValue = null; //记录上次双敲复核完成后的值\n\n      EventUtil.addHandler(ele, 'blur', function (event) {\n        if (this.value != '' || firstvalue != '') {\n          console.log('entertwice 离焦 输入的值不为空');\n          that.$message1({\n            content: 'entertwice 离焦 输入的值不为空',\n            time: 5000,\n            type: 'info',\n            hasClose: true\n          }); //离焦时,如果上次双敲复核完成后的值不等于这次的值,才能双敲复核,否则默认不再进行双敲复核\n\n          if (lastValue != this.value) {\n            lastValue = null; //每当开启双敲复核,就把上次双敲复核的值重置为null\n\n            if (firstvalue == this.value && firstvalue != '') {\n              //找下个焦点\n              firstvalue = \"\";\n              lastValue = this.value; // $target.trigger('twiceDone');//触发双敲复核的完成事件\n            } else {\n              if (firstvalue == '') {\n                firstvalue = this.value;\n                that.$message1({\n                  content: '请再输入一次',\n                  time: 5000,\n                  type: 'info',\n                  hasClose: true\n                }); // BJUI.alertmsg(\"info\", \"请再输入一次\", {\n                //     displayPosition: 'middlecenter',\n                //     okCall: function () {\n                //         $target.val(\"\");\n                //         $target.focus();\n                //     }\n                // });\n              } else {\n                that.$message1({\n                  content: '两次输入不一致,请重新输入!',\n                  time: 5000,\n                  type: 'warn',\n                  hasClose: true\n                }); // BJUI.alertmsg(\"info\", \"两次输入不一致,请重新输入!\", {\n                //     displayPosition: 'middlecenter',\n                //     okCall: function () {\n                //         $target.val(\"\");\n                //         $target.focus();\n                //     }\n                // });\n\n                firstvalue = this.value;\n              }\n            }\n          }\n        }\n      }); // $target.on(\"resetentertwice\", function () {\n      //     firstvalue=\"\";\n      //     lastValue=null;\n      // })\n      //var firstvalue = \"\";\n      // var lastValue = null;\n      // $target.on(\"if.blur\", function () {\n      //     if($target.val()!=''||firstvalue!=''){\n      //         if (lastValue != $target.val()) {\n      //             lastValue = null;\n      //             if (firstvalue == $(this).val() && firstvalue != '') {\n      //                 //找下个焦点\n      //                 firstvalue = \"\";\n      //                 lastValue = $target.val();\n      //                 $target.trigger('twiceDone');\n      //                 var tabindex = $target.attr('tabindex');\n      //                 var index = tabindex.replace('IF', '');\n      //                 index = index * 1 + 1;\n      //                 $('[tabindex=IF' + index + ']:visible').focus();\n      //             } else {\n      //                 if (firstvalue == '') {\n      //                     firstvalue = $target.val();\n      //                     BJUI.alertmsg(\"info\", \"请再输入一次\", {\n      //                         displayPosition: 'middlecenter',\n      //                         okCall: function () {\n      //                             $target.val(\"\");\n      //                             $target.focus();\n      //                         }\n      //                     });\n      //                 } else {\n      //                     BJUI.alertmsg(\"info\", \"两次输入不一致,请重新输入!\", {\n      //                         displayPosition: 'middlecenter',\n      //                         okCall: function () {\n      //                             $target.val(\"\");\n      //                             $target.focus();\n      //                         }\n      //                     });\n      //                     firstvalue = $target.val();\n      //                 }\n      //             }\n      //         }\n      //     }else{\n      //         // $target.focus();\n      //         // $target.trigger(\"showmsg\", [\"error\", \"请输入值\"]);\n      //     }\n      // });\n    },\n    updateValue: function updateValue(value) {\n      this.$emit('input', value);\n    }\n  }\n};",{"version":3,"sources":["customInput.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <input ref=\"input\" v-bind:value=\"value\" @input=\"updateValue($event.target.value)\">\n    <!-- v-on:input=\"updateValue($event.target.value)\" -->\n</template>\n<script>\n    let EventUtil = null;\n    let inputControl = null;\n    export default {\n        name: 'customInput',\n        props: ['value'],\n        data() {\n            return {\n                todos: \"\",\n            }\n        },\n        created: function () {\n            EventUtil = this.CommonFun.EventUtil;\n            inputControl = this.CommonFun.inputControl;\n        },\n        mounted: function () {\n            let input = this.$refs.input;\n            if (this.$refs.input.getAttribute('data-control') != undefined) {\n                let controlList = this.$refs.input.getAttribute('data-control').split(',');\n                controlList.map(item => this[item](this.$refs.input))\n            }\n\n        },\n        methods: {\n            phone: function (ele) {\n                //最大长度\n                ele.setAttribute('maxLength', '11');\n                //只能输入数字\n                // inputControl.onlyNumber(ele);\n            },\n            idCard: function (ele) {\n                //最大长度\n                ele.setAttribute('maxLength', '18');\n\n                //只能输入数字\n                inputControl.onlyNumber(ele);\n            },\n            magnify: function (ele) {\n                EventUtil.addHandler(ele, 'focus', function (event) {\n                    ele.style.transform = \"scale(1.5)\";\n                })\n                EventUtil.addHandler(ele, 'blur', function (event) {\n                    ele.style.transform = \"\";\n                })\n            },\n            entertwice: function (ele) {\n                let that = this;\n                let firstvalue = \"\";\n                let lastValue = null; //记录上次双敲复核完成后的值\n                EventUtil.addHandler(ele, 'blur', function (event) {\n                    if (this.value != '' || firstvalue != '') {\n                        console.log('entertwice 离焦 输入的值不为空');\n                        that.$message1({\n                            content: 'entertwice 离焦 输入的值不为空',\n                            time: 5000,\n                            type: 'info',\n                            hasClose: true,\n                        });\n                        //离焦时,如果上次双敲复核完成后的值不等于这次的值,才能双敲复核,否则默认不再进行双敲复核\n                        if (lastValue != this.value) {\n                            lastValue = null; //每当开启双敲复核,就把上次双敲复核的值重置为null\n                            if (firstvalue == this.value && firstvalue != '') {\n                                //找下个焦点\n                                firstvalue = \"\";\n                                lastValue = this.value;\n                                // $target.trigger('twiceDone');//触发双敲复核的完成事件\n\n                            } else {\n                                if (firstvalue == '') {\n                                    firstvalue = this.value;\n                                    that.$message1({\n                                        content: '请再输入一次',\n                                        time: 5000,\n                                        type: 'info',\n                                        hasClose: true,\n                                    });\n                                    // BJUI.alertmsg(\"info\", \"请再输入一次\", {\n                                    //     displayPosition: 'middlecenter',\n                                    //     okCall: function () {\n\n                                    //         $target.val(\"\");\n                                    //         $target.focus();\n                                    //     }\n                                    // });\n                                } else {\n                                    that.$message1({\n                                        content: '两次输入不一致,请重新输入!',\n                                        time: 5000,\n                                        type: 'warn',\n                                        hasClose: true,\n                                    });\n                                    // BJUI.alertmsg(\"info\", \"两次输入不一致,请重新输入!\", {\n                                    //     displayPosition: 'middlecenter',\n                                    //     okCall: function () {\n                                    //         $target.val(\"\");\n                                    //         $target.focus();\n                                    //     }\n                                    // });\n                                    firstvalue = this.value;\n                                }\n\n                            }\n                        }\n                    }\n                })\n                // $target.on(\"resetentertwice\", function () {\n                //     firstvalue=\"\";\n                //     lastValue=null;\n                // })\n\n                //var firstvalue = \"\";\n                // var lastValue = null;\n                // $target.on(\"if.blur\", function () {\n                //     if($target.val()!=''||firstvalue!=''){\n                //         if (lastValue != $target.val()) {\n                //             lastValue = null;\n                //             if (firstvalue == $(this).val() && firstvalue != '') {\n                //                 //找下个焦点\n                //                 firstvalue = \"\";\n                //                 lastValue = $target.val();\n                //                 $target.trigger('twiceDone');\n                //                 var tabindex = $target.attr('tabindex');\n                //                 var index = tabindex.replace('IF', '');\n                //                 index = index * 1 + 1;\n                //                 $('[tabindex=IF' + index + ']:visible').focus();\n\n                //             } else {\n                //                 if (firstvalue == '') {\n                //                     firstvalue = $target.val();\n                //                     BJUI.alertmsg(\"info\", \"请再输入一次\", {\n                //                         displayPosition: 'middlecenter',\n                //                         okCall: function () {\n\n                //                             $target.val(\"\");\n                //                             $target.focus();\n                //                         }\n                //                     });\n                //                 } else {\n                //                     BJUI.alertmsg(\"info\", \"两次输入不一致,请重新输入!\", {\n                //                         displayPosition: 'middlecenter',\n                //                         okCall: function () {\n                //                             $target.val(\"\");\n                //                             $target.focus();\n                //                         }\n                //                     });\n                //                     firstvalue = $target.val();\n                //                 }\n\n                //             }\n                //         }\n                //     }else{\n                //         // $target.focus();\n                //         // $target.trigger(\"showmsg\", [\"error\", \"请输入值\"]);\n                //     }\n\n                // });\n\n\n            },\n            updateValue: function (value) {\n                this.$emit('input', value)\n            }\n        }\n    }\n</script>\n<style scoped>\n    input::-webkit-outer-spin-button,\n    input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n    }\n\n    inputp[type=\"number\"] {\n        -moz-appearance: textfield;\n    }\n</style>"],"sourceRoot":"src\\components"}]}