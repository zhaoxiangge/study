{"remainingRequest":"K:\\VUE\\xz_admin_v2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!K:\\VUE\\xz_admin_v2\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!K:\\VUE\\xz_admin_v2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!K:\\VUE\\xz_admin_v2\\src\\views\\componentStudy.vue?vue&type=template&id=5eda1d80","dependencies":[{"path":"K:\\VUE\\xz_admin_v2\\src\\views\\componentStudy.vue","mtime":1561104858614},{"path":"K:\\VUE\\xz_admin_v2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531859504000},{"path":"K:\\VUE\\xz_admin_v2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1526010764000},{"path":"K:\\VUE\\xz_admin_v2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531859504000},{"path":"K:\\VUE\\xz_admin_v2\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"component page\" }, [\n    _c(\"fieldset\", { staticClass: \"fieldset\" }, [\n      _c(\"legend\", [_vm._v(\"父子组件互相传值\")]),\n      _c(\"div\", { staticClass: \"fieldContent\" }, [_c(\"parent\")], 1)\n    ]),\n    _c(\"fieldset\", { staticClass: \"fieldset\" }, [\n      _c(\"legend\", [_vm._v(\"使用自定义事件的表单输入组件\")]),\n      _c(\"div\", { staticClass: \"fieldContent\" }, [\n        _c(\"p\", [\n          _vm._v(\n            'v-model的语法糖:使用v-bind:value=\"something\" v-on:input=\"something = $event.target.value\" 实现双向绑定,等同于 v-model=\"something\"'\n          )\n        ]),\n        _c(\"input\", {\n          domProps: { value: _vm.something },\n          on: {\n            input: function($event) {\n              _vm.something = $event.target.value\n            }\n          }\n        }),\n        _c(\"p\", [_c(\"span\", [_vm._v(_vm._s(_vm.something))])])\n      ]),\n      _c(\n        \"div\",\n        { staticClass: \"fieldContent\", staticStyle: { \"margin-top\": \"10px\" } },\n        [\n          _c(\"p\", [\n            _vm._v(\"理解完v-model的语法糖,创建一个自定义事件的表单输入组件\")\n          ]),\n          _c(\"p\", [_c(\"span\", [_vm._v(_vm._s(_vm.customInputHtml))])]),\n          _c(\"customInput\", {\n            attrs: { \"data-control\": \"phone\" },\n            model: {\n              value: _vm.customInput1,\n              callback: function($$v) {\n                _vm.customInput1 = $$v\n              },\n              expression: \"customInput1\"\n            }\n          }),\n          _c(\"p\", [\n            _vm._v(\"customInput1,phone:\\n                \"),\n            _c(\"span\", [_vm._v(_vm._s(_vm.customInput1))])\n          ]),\n          _c(\"customInput\", {\n            attrs: { \"data-control\": \"idCard\" },\n            model: {\n              value: _vm.customInput2,\n              callback: function($$v) {\n                _vm.customInput2 = $$v\n              },\n              expression: \"customInput2\"\n            }\n          }),\n          _c(\"p\", [\n            _vm._v(\"customInput2,idCard:\\n                \"),\n            _c(\"span\", [_vm._v(_vm._s(_vm.customInput2))])\n          ]),\n          _c(\"customInput\", {\n            attrs: { \"data-control\": \"magnify\" },\n            model: {\n              value: _vm.customInput3,\n              callback: function($$v) {\n                _vm.customInput3 = $$v\n              },\n              expression: \"customInput3\"\n            }\n          }),\n          _c(\"p\", [\n            _vm._v(\"customInput3,magnify:\\n                \"),\n            _c(\"span\", [_vm._v(_vm._s(_vm.customInput3))])\n          ]),\n          _c(\"customInput\", {\n            attrs: { \"data-control\": \"phone,magnify\" },\n            model: {\n              value: _vm.customInput4,\n              callback: function($$v) {\n                _vm.customInput4 = $$v\n              },\n              expression: \"customInput4\"\n            }\n          }),\n          _c(\"p\", [\n            _vm._v(\"customInput4,phone,magnify:\\n                \"),\n            _c(\"span\", [_vm._v(_vm._s(_vm.customInput4))])\n          ]),\n          _c(\"customInput\", {\n            attrs: { \"data-control\": \"entertwice,phone,magnify\" },\n            model: {\n              value: _vm.customInput5,\n              callback: function($$v) {\n                _vm.customInput5 = $$v\n              },\n              expression: \"customInput5\"\n            }\n          }),\n          _c(\"p\", [\n            _vm._v(\"customInput5,phone,magnify,entertwice:\\n                \"),\n            _c(\"span\", [_vm._v(_vm._s(_vm.customInput5))])\n          ])\n        ],\n        1\n      )\n    ]),\n    _vm._m(0),\n    _c(\"fieldset\", { staticClass: \"fieldset\" }, [\n      _c(\"legend\", [_vm._v(\"使用插槽分发内容\")]),\n      _c(\n        \"div\",\n        { staticClass: \"fieldContent\" },\n        [\n          _c(\n            \"slotParent\",\n            [\n              _c(\"customInput\", {\n                attrs: { \"data-control\": \"phone\" },\n                model: {\n                  value: _vm.customInput1,\n                  callback: function($$v) {\n                    _vm.customInput1 = $$v\n                  },\n                  expression: \"customInput1\"\n                }\n              })\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ]),\n    _c(\"fieldset\", { staticClass: \"fieldset\" }, [\n      _c(\"legend\", [_vm._v(\"动态组件\")]),\n      _c(\n        \"div\",\n        { staticClass: \"fieldContent\" },\n        [\n          _c(\"div\", { staticClass: \"mb10\" }, [\n            _c(\n              \"select\",\n              {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.currentView,\n                    expression: \"currentView\"\n                  }\n                ],\n                attrs: { name: \"singleSelected\", id: \"\" },\n                on: {\n                  change: function($event) {\n                    var $$selectedVal = Array.prototype.filter\n                      .call($event.target.options, function(o) {\n                        return o.selected\n                      })\n                      .map(function(o) {\n                        var val = \"_value\" in o ? o._value : o.value\n                        return val\n                      })\n                    _vm.currentView = $event.target.multiple\n                      ? $$selectedVal\n                      : $$selectedVal[0]\n                  }\n                }\n              },\n              [\n                _c(\"option\", { attrs: { disabled: \"\", value: \"\" } }, [\n                  _vm._v(\"请选择\")\n                ]),\n                _vm._l(_vm.componentArr, function(item) {\n                  return _c(\"option\", { domProps: { value: item.value } }, [\n                    _vm._v(_vm._s(item.text))\n                  ])\n                })\n              ],\n              2\n            )\n          ]),\n          _c(\n            \"transition\",\n            { attrs: { name: \"component-fade\", mode: \"out-in\" } },\n            [_c(\"keep-alive\", [_c(_vm.currentView, { tag: \"component\" })], 1)],\n            1\n          ),\n          _c(\n            \"textarea\",\n            { attrs: { name: \"\", id: \"\", cols: \"30\", rows: \"10\" } },\n            [\n              _vm._v(\n                '                通过使用保留的\\n                <component> 元素，并对其 is 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件： keep-alive 如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 keep-alive\\n                    指令参数：\\n\\n                    <keep-alive>\\n                        <component :is=\"currentView\">\\n                            <!-- 非活动组件将被缓存！ -->\\n                        </component>\\n                    </keep-alive>\\n            '\n              )\n            ]\n          )\n        ],\n        1\n      )\n    ])\n  ])\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"fieldset\", { staticClass: \"fieldset\" }, [\n      _c(\"legend\", [_vm._v(\"非父子组件的通信\")]),\n      _c(\"div\", { staticClass: \"fieldContent\" }, [\n        _c(\"p\", [\n          _c(\"span\", [\n            _vm._v(\n              \"总结:组件A实例化对象 在created后 监听 自定义事件 A.on('id-selected',function(){}),组件B的内用代码 A.$emit('id-selected', 1)\"\n            )\n          ])\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}