{"remainingRequest":"K:\\VUE\\vueStudy\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!K:\\VUE\\vueStudy\\src\\views\\componentStudy.vue?vue&type=template&id=bb9f939e","dependencies":[{"path":"K:\\VUE\\vueStudy\\src\\views\\componentStudy.vue","mtime":1561104858614},{"path":"K:\\VUE\\vueStudy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531859504000},{"path":"K:\\VUE\\vueStudy\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1526010764000},{"path":"K:\\VUE\\vueStudy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531859504000},{"path":"K:\\VUE\\vueStudy\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["\n<div class=\"component page\">\n    <fieldset class=\"fieldset\">\n        <legend>父子组件互相传值</legend>\n        <div class=\"fieldContent\">\n            <parent></parent>\n        </div>\n    </fieldset>\n    <fieldset class=\"fieldset\">\n        <legend>使用自定义事件的表单输入组件</legend>\n        <div class=\"fieldContent\">\n            <p>v-model的语法糖:使用v-bind:value=\"something\" v-on:input=\"something = $event.target.value\" 实现双向绑定,等同于 v-model=\"something\"</p>\n            <input v-bind:value=\"something\" v-on:input=\"something = $event.target.value\">\n            <p>\n                <span>{{something}}</span>\n            </p>\n        </div>\n        <div class=\"fieldContent\" style=\"margin-top: 10px;\">\n            <p>理解完v-model的语法糖,创建一个自定义事件的表单输入组件</p>\n            <p>\n                <span>{{customInputHtml}}</span>\n            </p>\n            <customInput data-control=\"phone\" v-model=\"customInput1\"></customInput>\n            <p>customInput1,phone:\n                <span>{{customInput1}}</span>\n            </p>\n\n            <customInput data-control=\"idCard\" v-model=\"customInput2\"></customInput>\n\n            <p>customInput2,idCard:\n                <span>{{customInput2}}</span>\n            </p>\n\n            <customInput data-control=\"magnify\" v-model=\"customInput3\"></customInput>\n\n            <p>customInput3,magnify:\n                <span>{{customInput3}}</span>\n            </p>\n\n            <customInput data-control=\"phone,magnify\" v-model=\"customInput4\"></customInput>\n\n            <p>customInput4,phone,magnify:\n                <span>{{customInput4}}</span>\n            </p>\n            <customInput data-control=\"entertwice,phone,magnify\" v-model=\"customInput5\"></customInput>\n\n            <p>customInput5,phone,magnify,entertwice:\n                <span>{{customInput5}}</span>\n            </p>\n\n        </div>\n    </fieldset>\n    <fieldset class=\"fieldset\">\n        <legend>非父子组件的通信</legend>\n        <div class=\"fieldContent\">\n            <p>\n                <span>总结:组件A实例化对象 在created后 监听 自定义事件 A.on('id-selected',function(){}),组件B的内用代码 A.$emit('id-selected', 1)</span>\n            </p>\n        </div>\n    </fieldset>\n    <fieldset class=\"fieldset\">\n        <legend>使用插槽分发内容</legend>\n        <div class=\"fieldContent\">\n            <slotParent>\n                <customInput data-control=\"phone\" v-model=\"customInput1\"></customInput>\n            </slotParent>\n        </div>\n    </fieldset>\n    <fieldset class=\"fieldset\">\n        <legend>动态组件</legend>\n        <div class=\"fieldContent\">\n            <div class=\"mb10\">\n                <select name=\"singleSelected\" v-model=\"currentView\" id=\"\">\n                    <option disabled value=\"\">请选择</option>\n                    <option v-for=\"item in componentArr\" :value=\"item.value\">{{item.text}}</option>\n                </select>\n            </div>\n            <transition name=\"component-fade\" mode=\"out-in\">\n                <keep-alive>\n                    <component v-bind:is=\"currentView\">\n                        <!-- 组件在 vm.currentview 变化时改变！ -->\n                    </component>\n                </keep-alive>\n            </transition>\n\n            <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\">\n                通过使用保留的\n                <component> 元素，并对其 is 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件： keep-alive 如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 keep-alive\n                    指令参数：\n\n                    <keep-alive>\n                        <component :is=\"currentView\">\n                            <!-- 非活动组件将被缓存！ -->\n                        </component>\n                    </keep-alive>\n            </textarea>\n        </div>\n    </fieldset>\n</div>\n",null]}