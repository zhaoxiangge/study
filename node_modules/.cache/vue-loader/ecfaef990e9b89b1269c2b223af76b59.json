{"remainingRequest":"J:\\xz_admin_v2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!J:\\xz_admin_v2\\src\\components\\parentChild\\parent.vue?vue&type=style&index=0&id=15715b24&scoped=true&lang=css","dependencies":[{"path":"J:\\xz_admin_v2\\src\\components\\parentChild\\parent.vue","mtime":1557230057121},{"path":"J:\\xz_admin_v2\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"J:\\xz_admin_v2\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1521907989000},{"path":"J:\\xz_admin_v2\\node_modules\\postcss-loader\\lib\\index.js","mtime":499162500000},{"path":"J:\\xz_admin_v2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531859503174},{"path":"J:\\xz_admin_v2\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np{margin: 6px;}\n",{"version":3,"sources":["parent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA","file":"parent.vue","sourceRoot":"src\\components\\parentChild","sourcesContent":["<template>\r\n    <div class=\"bg1\" style=\"padding: 10px;\">\r\n        <p>parent</p>\r\n        <p>父组件的输入框的值:\r\n            <span>{{input1}}</span>\r\n        </p>\r\n        <p>子组件传来的值是:\r\n            <span>{{childValue}}</span>\r\n        </p>\r\n        <input type=\"text\" name=\"\" id=\"\" v-model=\"input1\" placeholder=\"v-model=input1 \">\r\n        <!-- data-3d-date-picker=\"true\" data-attr-ycselect=\"cityname,110010\"所谓非 prop 特性，就是指它可以直接传入组件，而不需要定义相应的 prop。\r\n\r\n尽管为组件定义明确的 prop 是推荐的传参方式，组件的作者却并不总能预见到组件被使用的场景。所以，组件可以接收任意传入的特性，这些特性都会被添加到组件的根元素上 -->\r\n        <p>\r\n            .sync,用于对prop 进行“双向绑定”,使用方式 在组件标签上 :txt1.sync=\"input1\" ,1.在绑定的prop名字后加修饰符.sync,2.在子组件内用 this.$emit('update:txt1', newValue)\r\n        </p>\r\n        <child-a v-on:click=\"doTheThing2\" v-on:click.native=\"doTheThing1\" data-3d-date-picker=\"true\" data-attr-ycselect=\"cityname,110010\"\r\n            :txt1.sync=\"input1\" txt2=\"ddddd\" @getChildValue=\"handleChildValue\"></child-a>\r\n\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\n    import childA from \"@/components/parentChild/child.vue\";\r\n    export default {\r\n        name: 'parent',\r\n        data() {\r\n            return {\r\n                input1: '',\r\n                childValue: '',\r\n            }\r\n        },\r\n        created: function () {\r\n            window.componentsParentChildParent = this;\r\n        },\r\n        components: {\r\n            'child-a': childA\r\n        },\r\n        methods: {\r\n            handleChildValue: function (data) {\r\n                console.log(data);\r\n                this.childValue = data.msg;\r\n            },\r\n            doTheThing1: function (e) {\r\n                console.log('点击了子组件,触发了click,doTheThing1');\r\n            },\r\n            doTheThing2: function (e) {\r\n                console.log('点击了子组件,触发了click,doTheThing2');\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n    p{margin: 6px;}\r\n</style>"]}]}