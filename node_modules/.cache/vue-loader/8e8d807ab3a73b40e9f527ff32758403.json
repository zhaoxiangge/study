{"remainingRequest":"K:\\VUE\\xz_admin_v2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!K:\\VUE\\xz_admin_v2\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!K:\\VUE\\xz_admin_v2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!K:\\VUE\\xz_admin_v2\\src\\views\\componentStudy.vue?vue&type=template&id=5e06fcf2","dependencies":[{"path":"K:\\VUE\\xz_admin_v2\\src\\views\\componentStudy.vue","mtime":1557382776591},{"path":"K:\\VUE\\xz_admin_v2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531859503174},{"path":"K:\\VUE\\xz_admin_v2\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1526010763000},{"path":"K:\\VUE\\xz_admin_v2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531859503174},{"path":"K:\\VUE\\xz_admin_v2\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"component page\"},[_c('fieldset',{staticClass:\"fieldset\"},[_c('legend',[_vm._v(\"父子组件互相传值\")]),_c('div',{staticClass:\"fieldContent\"},[_c('parent')],1)]),_c('fieldset',{staticClass:\"fieldset\"},[_c('legend',[_vm._v(\"使用自定义事件的表单输入组件\")]),_c('div',{staticClass:\"fieldContent\"},[_c('p',[_vm._v(\"v-model的语法糖:使用v-bind:value=\\\"something\\\" v-on:input=\\\"something = $event.target.value\\\" 实现双向绑定,等同于 v-model=\\\"something\\\"\")]),_c('input',{domProps:{\"value\":_vm.something},on:{\"input\":function($event){_vm.something = $event.target.value}}}),_c('p',[_c('span',[_vm._v(_vm._s(_vm.something))])])]),_c('div',{staticClass:\"fieldContent\",staticStyle:{\"margin-top\":\"10px\"}},[_c('p',[_vm._v(\"理解完v-model的语法糖,创建一个自定义事件的表单输入组件\")]),_c('p',[_c('span',[_vm._v(_vm._s(_vm.customInputHtml))])]),_c('customInput',{attrs:{\"data-control\":\"phone\"},model:{value:(_vm.customInput1),callback:function ($$v) {_vm.customInput1=$$v},expression:\"customInput1\"}}),_c('p',[_vm._v(\"customInput1,phone:\\n                \"),_c('span',[_vm._v(_vm._s(_vm.customInput1))])]),_c('customInput',{attrs:{\"data-control\":\"idCard\"},model:{value:(_vm.customInput2),callback:function ($$v) {_vm.customInput2=$$v},expression:\"customInput2\"}}),_c('p',[_vm._v(\"customInput2,idCard:\\n                \"),_c('span',[_vm._v(_vm._s(_vm.customInput2))])]),_c('customInput',{attrs:{\"data-control\":\"magnify\"},model:{value:(_vm.customInput3),callback:function ($$v) {_vm.customInput3=$$v},expression:\"customInput3\"}}),_c('p',[_vm._v(\"customInput3,magnify:\\n                \"),_c('span',[_vm._v(_vm._s(_vm.customInput3))])]),_c('customInput',{attrs:{\"data-control\":\"phone,magnify\"},model:{value:(_vm.customInput4),callback:function ($$v) {_vm.customInput4=$$v},expression:\"customInput4\"}}),_c('p',[_vm._v(\"customInput4,phone,magnify:\\n                \"),_c('span',[_vm._v(_vm._s(_vm.customInput4))])]),_c('customInput',{attrs:{\"data-control\":\"entertwice,phone,magnify\"},model:{value:(_vm.customInput5),callback:function ($$v) {_vm.customInput5=$$v},expression:\"customInput5\"}}),_c('p',[_vm._v(\"customInput5,phone,magnify,entertwice:\\n                \"),_c('span',[_vm._v(_vm._s(_vm.customInput5))])])],1)]),_vm._m(0),_c('fieldset',{staticClass:\"fieldset\"},[_c('legend',[_vm._v(\"使用插槽分发内容\")]),_c('div',{staticClass:\"fieldContent\"},[_c('slotParent',[_c('customInput',{attrs:{\"data-control\":\"phone\"},model:{value:(_vm.customInput1),callback:function ($$v) {_vm.customInput1=$$v},expression:\"customInput1\"}})],1)],1)]),_c('fieldset',{staticClass:\"fieldset\"},[_c('legend',[_vm._v(\"动态组件\")]),_c('div',{staticClass:\"fieldContent\"},[_c('div',{staticClass:\"mb10\"},[_c('select',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.currentView),expression:\"currentView\"}],attrs:{\"name\":\"singleSelected\",\"id\":\"\"},on:{\"change\":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \"_value\" in o ? o._value : o.value;return val}); _vm.currentView=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},[_c('option',{attrs:{\"disabled\":\"\",\"value\":\"\"}},[_vm._v(\"请选择\")]),_vm._l((_vm.componentArr),function(item){return _c('option',{domProps:{\"value\":item.value}},[_vm._v(_vm._s(item.text))])})],2)]),_c('transition',{attrs:{\"name\":\"component-fade\",\"mode\":\"out-in\"}},[_c('keep-alive',[_c(_vm.currentView,{tag:\"component\"})],1)],1),_c('textarea',{attrs:{\"name\":\"\",\"id\":\"\",\"cols\":\"30\",\"rows\":\"10\"}},[_vm._v(\"                通过使用保留的\\n                <component> 元素，并对其 is 特性进行动态绑定，你可以在同一个挂载点动态切换多个组件： keep-alive 如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 keep-alive\\n                    指令参数：\\n\\n                    <keep-alive>\\n                        <component :is=\\\"currentView\\\">\\n                            <!-- 非活动组件将被缓存！ -->\\n                        </component>\\n                    </keep-alive>\\n            \")])],1)])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('fieldset',{staticClass:\"fieldset\"},[_c('legend',[_vm._v(\"非父子组件的通信\")]),_c('div',{staticClass:\"fieldContent\"},[_c('textarea',{attrs:{\"name\":\"\",\"id\":\"\",\"cols\":\"30\",\"rows\":\"10\"}},[_vm._v(\"                有时候，非父子关系的两个组件之间也需要通信。在简单的场景下，可以使用一个空的 Vue 实例作为事件总线： var bus = new Vue() // 触发组件 A 中的事件 bus.$emit('id-selected', 1) // 在组件\\n                B 创建的钩子中监听事件 bus.$on('id-selected', function (id) { // ... })\\n            \")]),_c('p',[_c('span',[_vm._v(\"总结:组件A实例化对象 在created后 监听 自定义事件 A.on('id-selected',function(){}),组件B的内用代码 A.$emit('id-selected', 1)\")])])])])}]\n\nexport { render, staticRenderFns }"]}